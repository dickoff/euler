//
//  12.swift
//  euler
//
//  Created by Matt Dickoff on 9/17/18.
//  Copyright Â© 2018 Matt Dickoff. All rights reserved.
//

import Foundation

class Problem12: Problem {
    var problemDefinition = """
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

    func numDivisors(x: Int) -> Int {
        let divisors = (1...x).filter  { x % $0 == 0 };
        return divisors.count;
    }

    func triangle(n: Int) -> Int{
        return (n * (n + 1)) / 2;
    }

    func solve() -> Answer {
        var n = 1,
            t = 1,
            limit = 500,
            leftDivisors = 1,
            rightDivisors = 1;

        while (true) {
            n += 1;
            t = triangle(n: n);
            // n and n+1 are coprime and thus share no divisors.

            // Take the even number in { n, n + 1 }
            // Assuming n is even:
            //      numDivisors((n/2) * (n+1)) = numDivisors(n/2) * numDivisors(n+1)
            if n % 2 == 0 {
                rightDivisors = numDivisors(x : n + 1);
            }
            else {
                rightDivisors = numDivisors(x : (n + 1) / 2);
            }

            if (leftDivisors * rightDivisors) > limit {
                break;
            }
            else {
                leftDivisors = rightDivisors;
            }
        }
        return Answer.init(result: t);
    }
}
